Arch Linux UEFI Install Guide. (More Info and some notes at the bottom).

1. ls /sys/firmware/efi/efivars (If this command fails then your in legacy bios boot).

2. loadkeys us (done by default)

3. timedatectl set-ntp true

4. Networking. (If you have ehternet you can skip this step because systemd-networkd would have already configured it).
a. ip link (This is to check if you're getting an ip through ethernet or Wi-Fi).
b. iwctl (This bit is for Wi-Fi. If you have ethernet then you can skip the iwd stuff).
c. device list
d. station [Your wifi card] scan
e. starion [Your wifi card] get-networks
f. station [your wifi card] connect "[your network]"
g. press ctrl + d to exit iwd
h. ip link (To verify that you're getting an ip to Wi-Fi).

ping archlinux.org (This is just to check that you're connected).

5. Creating the Partition Tables.
a. lsblk (To see what hard drives you have installed)
b. hdparm -i  /dev/the_disk_to_be_partitioned (This is to double check that you've selected the right drive).
c. gdisk /dev/the_disk_to_be_partitioned (Only if you have another os on the drive and want to nuke it. If it's a blank drive then just skip this and move to cgdisk).
    x (for expert mode)
    z (To delete the entire content of the drive).
d. cgdisk /dev/the_disk_to_be_partitioned
e. Format the drive like this. 
Boot Partition = Default - 1024MiB - EF00 - boot
Swap Partition = Default - 16GiB - 8200 - swap
Root Partition = Default - 32GiB - root
Home Partition = Default - [the remainder of the drive] - home
Note: EF00 = uefi bootable partition, 8200 = swap and 8300 = linux filesystem. (Just incase you don't know what they mean).
f. write changes to disk

6. Format and Mount file systems.
a. lsblk (Just to see what your doing)
b. mkfs.ext4 /dev/root_partition
c. mkswap /dev/swap_partition
d. swapon /dev/swap_partition
e. mkfs.fat -F 32 /dev/efi_system_partition
f. mkfs.ext4 /dev/home_partition 
g. mount /dev/root_partition /mnt
h. mkdir /mnt/home
i. mount /dev/home_partition /mnt/home

Mount Bootloader Partitions.
7a. Systemd-Boot. (Hard Mode)
a. mkdir /mnt/boot
b. mount /dev/efi_system_partition /mnt/boot

7b. Grub Bootloader. (Easy Mode) [DO NOT USE GRUB IF YOU DON"T WANT A BROKEN INSTALL!!!!]
h. mkdir /mnt/boot/efi
i. mount /dev/efi_system_partition /mnt/boot/efi

8. Configure mirrorlist.
a. cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
b. nano /etc/pacman.d/mirrorlist (Check if all the servers are uncommented).
c. pacman -Sy
d. pacman -S pacman-contrib
e. rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist

9. Downloading Essential Packages.
pacstrap -i /mnt base base-devel linux linux-headers linux-firmware linux-firmware-marvell linux-firmware-whence nano

10. genfstab -U /mnt >> /mnt/etc/fstab

11. arch-chroot /mnt

12. Localisation and Timezone.
a. nano /etc/locale.gen (uncomment en_US.UTF-8 UTF-8)
b. locale-gen
c. echo "LANG=en_US.UTF-8" >> /etc/locale.conf
d. export LANG=en_US.UTF-8
e. echo "KEYMAP=us" >> /etc/vconsole.conf (Defaults to en anyways so only do this if you have a different keyboard layout).
f. ln /usr/share/zoneinfo (This is to list the unix timezones)
g. ln -sf /usr/share/zoneinfo/[Your Country Here]/[Your Timesone Here] /etc/localtime
h. hwclock --systohc --utc

13. Configure Package Manager.
a. nano /etc/pacman.conf
b. Uncomment the line that you see below.
[multilib]
Include = /etc/pacman.d/mirrorlist
c. In Misc Options, remove the "#" from "ParallelDownloads = 5", "Color" and add to a new line "ILoveCandy" 
d. pacman -Sy

14. Installing more packages.
pacman -S git networkmanager reflector pacman-contrib bluez bluez-utils neovim bash-completion [Your CPU]-ucode

15. Enable System Services.
systemctl enable bluetooth.service
systemctl enable NetworkManager.service
systemctl enable fstrim.timer
systemctl enable reflector.timer

16. Hostname Configuration.
a. echo "[Insert Computer Name Here]" >> /etc/hostname
b. echo "127.0.0.1        localhost" >> /etc/hosts
c. echo "::1              localhost" >> /etc/hosts
d. echo "127.0.1.1        [Add same hostname as before. lol]" >> /etc/hosts

17. Laptop Battery Saver. (Optional)
a. sudo pacman -S acpi acpid
b. sudo pacman -S tlp (For lenovo thinkpad support).
Note: If you're running an LTS kernel, you will need the acpi_call-lts.
Note 2: If you're running a custom kernel, you will need acpi_call-dkms.
c. Enable the services.
systemctl enable acpid.service
systemctl tlp.service (Only if downloaded the package).

18. passwd (root account)

19. Add users.
a. useradd -m -G wheel,storage,power -s /bin/bash [Insert Username Here]
b. passwd [Insert Username Here]
c. EDITOR=nano visudo
d. Change the following configuration.
Uncomment "%wheel ALL=(ALL) ALL"
Add "Defaults rootpw" to the bottom of the file.

Bootloader. (You choose which one to install).
20a. Grub Bootloader. (Multi-boot/Easy Mode) [DO NOT USE GRUB IF YOU DON"T WANT A BROKEN INSTALL!!!!]
a. pacman -S grub efibootmgr os-prober
c. grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
d. nano etc/default/grub
e. Make any changes to the grub config.
f. grub-mkconfig -o /boot/grub/grub.cfg

20b. Systemd-boot. (Requires manual entries/Hard Mode).
a. mount -t efivarfs efivarfs /sys/firmware/efi/efivars
b. bootctl install
c. systemctl enable systemd-boot-update.service
d. nano /boot/loader/entries/arch.conf
e. Add the following content to the file
title Abyssal Linux
linux /vmlinuz-linux (change this depending on what kernel you have).
initrd /initramfs-linux.img
initrd /intel-ucode.img or /amd-ucode.img
f. echo "options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/root_partition) rw" >> /boot/loader/entries/arch.conf

21. Graphics Drivers. (Plus some packages for Vulkan and OpenCL.)
a.   AMD = pacman -S xf86-video-amdgpu libva-mesa-driver mesa opencl-mesa vulkan-radeon lib32-libva-mesa-driver lib32-mesa lib32-opencl-mesa lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader
     INTEL = pacman -S xf86-video-intel mesa intel-compute-runtime intel-media-driver vulkan-intel lib32-mesa lib32-vulkan-intel vulkan-icd-loader lib32-vulkan-icd-loader (Only if absolutely nessacary.)
     NVIDIA (Proprietary) = pacman -S nvidia-dkms nvidia-utils libglvnd opencl-nvidia lib32-nvidia-utils lib32-libglvnd lib32-opencl-nvidia nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loader
     NVIDIA (Open GPU Kernel Modules) = pacman -S nvidia-open-dkms nvidia-utils libglvnd opencl-nvidia lib32-nvidia-utils lib32-libglvnd lib32-opencl-nvidia nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loader
     NOUVEAU (Legacy Drivers) = xf86-video-nouveau mesa opencl-mesa lib32-mesa lib32-opencl-mesa
Note: Nouveau drivers are kind of scuffed, so not recommended anyways and the Open GPU Kernel Moduels are only capatible on Turing and up graphics cards.

22a. Configure Driver KMS/Enabling wayland support. (NVIDIA ONLY!)
a. nano /etc/mkinitcpio.conf
     Add "nvidia nvidia_modeset nvidia_uvm nvidia_drm" to the "MODULES()" line.
Note: If you fuck up this line, you're in trouble. So make sure it's in this order perfectly.
b. mkinitcpio -P
c. DRM kernel mode setting.
     Grub = nano /etc/default/grub
          = Add "nvidia-drm.modeset=1" to GRUB_CMDLINE_LINUX_DEFAULT=""
          = grub-mkconfig -o /boot/grub/grub.conf
     Systemd-Boot = nano /boot/loader/entries/arch.conf
	          = Add "nvidia-drm.modeset=1" to the end of the options line.
d. mkdir /etc/pacman.d/hooks
e. Make a Pacman hook so your not on the old drivers. (Only do the one related to your drivers).

NVIDIA = nano /etc/pacman.d/hooks/nvidia.hook
Add this content to the file.
[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia-dkms or nvidia-open-dkms

[Action]
Depends=mkinitcpio
When=PostTransaction
Exec=/usr/bin/mkinitcpio -P


22b. Configuring Driver KMS/Enabling wayland support. (AMDGPU ONLY!)
a. nano /etc/mkinitcpio.conf
     Add "amdgpu" to the "MODLUES()" line.
Note: If you fuck up this line, you're in trouble.
b. mkinitcpio -P

23. Unmount drives and Reboot system.
a. exit
b. umount -a
c. reboot

24. General checking.
a. systemctl --failed (This is to make sure that nothing fucked up when starting up).
b. sudo reflector --country [Your Country Here] --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
c. sudo nano /etc/xdg/reflector/reflector.conf
Edit the settings to your liking. An example is provided below
--country [Your Country Here]
--age 12
--protocol https
--sort rate
--save /etc/pacman.d/mirrorlist
d. sudo pacman -Sy

25. Enable AUR support.
a. git clone https://aur.archlinux.org/paru.git
b. cd paru
c. makepkg -csi
d. paru -Syyu

26. Graphical Environment. (I'm not going to be putting Window Managers in here because their too complex). [Fuck you past me. I added Window Managers lol]
a. Install Xorg.
     sudo pacman -S xorg xorg-xinit 
Note: If you want to use Wayland instead of Xorg. You have already enabled support for it, all you need to do is install a compatible Desktop Environment.
Wayland Note: The egl-wayland package may be needed if you have proprietary nvidia drivers.
b. Selecting your Desktop Environment and or Window Manager.
     AwesomeWM = sudo pacman -S awesome alacritty pcmanfm-qt
     Cinnamon = sudo pacman -S cinnamon blueman gnome-keyring gnome-terminal metacity
     Cosmic Desktop = The POP!_os team have yet to release a build where it can be ported to arch. [Not Complete]
     i3 = sudo pacman -S i3 alacritty pcmanfm-qt dmenu
     Gnome = sudo pacman -S gnome gnome-tweaks xdg-desktop-portal xdg-desktop-portal-gtk (Wayland supported/enabled by default).
           = sudo pacman -S --needed gnome-menus gettext xdg-utils (Only needed if your using ArcMenu extension).
     Hyprland = In VERY early stages of development and currently not recommended for daily use. [Not recommended]
     KDE Plasma (X11) = sudo pacman -S plasma kde-applications
     KDE Plasma (Wayland) = sudo pacman -S plasma kde-applications plasma-wayland-session qt6-wayland xdg-desktop-portal xdg-desktop-portal-kde
     LXQt = sudo pacman -S lxqt breeze-icons network-manager-applet leafpad
     Sway (AMDGPU & WAYLAND ONLY!) = sudo pacman -S sway swaylock swayidle swaybg waybar light grim slurp foot xdg-desktop-portal xdg-desktop-portal-wlr
				   = paru -S tofi
     Xfce = sudo pacman -S xfce xfce-goodies network-manager-applet 
     X Window Manager (Very basic and not recommended) = sudo pacman -S xorg-twm xorg-xclock xTerm
c. Installing and enabling a display manager.
     GDM (Recommended for Gnome) = Included with gnome so don't worry about downloading.
         			 = sudo systemctl enable gdm.service
     SDDM (Recommended for KDE or LXQt) = sudo pacman -S sddm
          				= sudo systemctl enable sddm.service
     LightDM (Can be used with most Desktops Enviornments or Window Managers) = sudo pacman -S lightdm
									      = Choose the greeter you want to use for LightDM.
									      lightdm-gtk-greeter lightdm-gtk-greeter-settings
									      lightdm-webkit2-greeter
									      lightdm-slick-greeter
									      = sudo systemctl enable lightdm.service
     StartX on startup = Too complex for this guide so I will simply link to the arch wiki. https://wiki.archlinux.org/title/Xinit#Autostart_X_at_login 
d. reboot

27. Audio Drivers. (Pipewire is needed for wayland since by itself doesn't allow screen recording and alsa-ucm-conf is for basic non configurable GoXLR support).
sudo pacman -S alsa-ucm-conf alsa-utils alsa-plugins pavucontrol pipewire pipewire-alsa pipewire-jack pipewire-pulse lib32-pipewire lib32-pipewire-jack pulsemixer qpwgraph sof-firmware wireplumber

28. Gstreamer Full Support. (This only applies to the normal Desktop Environments. Window Managers can be used without it).
sudo pacman -S gstreamer lib32-gstreamer gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugins-pipewire gstreamer-vaapi

28. Bash to Zsh replacment. (Optional)
a. sudo pacman -S zsh zsh-completions
b. Run the command zsh and complete the initial setup configuration.
Note: DO NOT USE A ZSH PLUGIN MANAGER AS THEY'RE JUST BLOAT!

29. Applications. (Just a list of basic applications/games. lol) This list is only if your using the terminal for packages.
Note: Before you install a program, always update your system with sudo pacman -Syu. This is to make sure the repos are up to date so there is no incompatibility.
Firefox = sudo pacman -S firefox
Chromium = sudo pacman -S chromium
Brave = paru -S brave-bin
Librewolf = paru -S librewolf-bin
Thunderbird = sudo pacman -S thunderbird
qbittorrent = sudo pacman -S qbittorrent
Spotify = paru -S spotify
GameMode = sudo pacman -S gamemode lib32-gamemode
lf file manager = paru -S lf (This replaces ranger if you want). [it's L not I just so you know].
Minecraft (Official support via AUR) = paru -S minecraft-launcher (Requires at least java 17 lts or java 8 lts).
Steam = sudo pacman -S steam
Ani-Cli (Not DMCA proof. User's own risk) = paru -S ani-cli-git
Lutris (Requires you to have already installed Wine.) = sudo pacman -S lutris
Reaper DAW = sudo pacman -S reaper
Polyphone = sudo pacman -S polyphone
Proton-GE = Download on Github.
Wine-GE = Download on Github.
Dolphin Emulator = paru -S dolphin-emu-git
Ryujinx = flatpak install ryujinx
Yuzu = flatpak install yuzu
pcsx2 = paru -S pcsx2-git
rpcs3 (Does not include ps3 firmware. Obviously) [Updated Upstream] = paru -S rpcs3-git
itch.io launcher = paru -S itch-setup-bin
osu! lazer = Download on Github
DDLC = Download on itch.io and to make the .sh file executable run the command 'chmod +x DDLC.sh'.
Steamtinkerlaunch = paru -S steamtinkerlaunch
Protonup-QT = paru -S protonup-qt
Athenaeum = flatpak install athenaeum
Heroic Games Launcher = paru -S heroic-games-launcher-bin
Mangohud = paru -S mangohud lib32-mangohud
GOverlay = paru -S goverlay-bin
Timeshift = paru -S timeshift
Clone Hero PTB = Download through their Discord.
Clone Hero v23.2.2 = Download from website.
ScoreSpy = Download from website.
Moonscraper Chart Editor= Download on Github.
Blender 2.79b (Only use if it's needed) = Download through website.
Blender Latest = sudo pacman -S blender
Unreal Engine = Need to build from Github private repo. (Difficult to compile).
Python = sudo pacman -S python python-pip
NodeJS = sudo pacman -S nodejs-lts-gallium npm
Adoptium Java11 (AUR) = paru -S jdk11-temurin
Adoptium Java8 (AUR) = paru -S jdk8-adoptopenjdk
Adoptium Java16 (AUR) = paru -S jdk16-adoptopenjdk
Adoptium Java17 (AUR) = paru -S jdk17-temurin
AppImageLauncher = paru -S appimagelauncher
Unity3D (AUR) = paru -S unityhub
Btop++ = sudo pacman -S btop
Wireshark = sudo pacman -S wireshark-qt
Htop = sudo pacman -S htop
Downgrade = paru -S downgrade
Flatseal = flatpak install flatseal
Activate Linux (This one is purely a joke). = paru -S activate-linux-git
MPV = sudo pacman -S mpv
7-Zip = paru -S 7-zip-full
Neofetch = sudo pacman -S neofetch
cMatrix = sudo pacman -S cmatrix
Arch Linux Wallpapers (Seriously, what were you expecting) = sudo pacman -S archlinux-wallpaper
Olive Video Editor = paru -S olive-git
Audacity = sudo pacman -S audacity
VS Codium (Compiled binaries of vs code from source without telemetry) = paru -S vscodium-bin
Visual Studio Code (Microsoft Official Binaries. 'Has Telemetry') = paru -S visual-studios-code-bin
	                  	                                  = sudo pacman -S dotnet-runtime dotnet-sdk mono-msbuild mono-msbuild-sdkresolver mono
Note: the dotnet and mono packages are so that Unity3D doesn't break when using vscode for it.

Discord Stable = sudo pacman -S discord
	       = echo ""SKIP_HOST_UPDATE": true" >> /.config/discord/settings.json

Discord Canary/Nightly = sudo pacman -S discord-canary
		       = echo ""SKIP_HOST_UPDATE": true" >> /.config/discord/settings.json
Note: To fix discord breaking from updates, add to the settings.json file "SKIP_HOST_UPDATE": true

OBS Studio (Official support via Flatpak) = flatpak install obs-studios
			                  = sudo pacman -S v4l2loopback-dkms

OBS Studio Tytan652 (Native version with some qol patches) = paru -s obs-studio-tytan652
					                   = sudo pacman -S v4l2loopback-dkms
Note: the Tytan652 version does not allow for twitch/youtube/restream account integration as this version is built from source and not an official binary.

OpenRGB = paru -S openrgb-git
        = sudo pacman -S i2c-tools

Flatpak = sudo pacman -S flatpak
        = reboot

Microsoft Windows 11 Fonts (Has to be built manually) = git clone https://aur.archlinux.org/ttf-ms-win11-auto.git
					              = cd ttf-ms-win11-auto
					              = makepkg -csi

Wine (Literally just a dependency nightmare) = sudo pacman -S wine-staging
					     = sudo pacman -S winetricks
				 	     = sudo pacman -S --needed giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo libxcomposite lib32-libxcomposite libxinerama lib32-libxinerama ncurses lib32-ncurses opencl-icd-loader lib32-opencl-icd-loader libxslt lib32-libxslt libva lib32-libva gtk3 lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader cups samba dosbox

WineASIO (Good for Ableton or FL Studio running in Wine) = paru -S wineasio
					                 = sudo usermod -aG realtime $(whoami)
					                 For 32bit, run: regsvr32 /usr/lib32/wine/i386-windows/wineasio.dll
					                 For 64bit, run: wine64 regsvr32 /usr/lib/wine/x86_64-windows/wineasio.dll

(Even though there are Clone Hero Packages in the AUR, I wouldn't recommend using those packages as they are not maintained by mdsitton, srylain or anyone else on the StrikeLine Team. Same thing with Moonscraper).

To extract tar.gz files use tar -xvzf [Your compressed file].tar.gz

To extract tar.xz files use tar -xvJf [Your compressed file].tar.xz

To extract tar.bzip2 files use tar -xvjf [Your compressed file].tar.bzip2

To run AppImages, you must have AppImageLauncher installed to have it fully intergrade into system and to be able to update the packages.
